package afzal.mugrai.vo.avalanche;

import android.content.Context;
import android.graphics.Camera;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.os.Handler;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.MotionEvent;
import android.view.View;

import java.util.ArrayList;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

public class TouchGameView extends View implements OnGestureListener{

    ArrayList<RectF> objects = new ArrayList<RectF>();
    Paint paint = new Paint();
    int width, height, rectWidth, rectX, rectY;
    Random num = new Random();
    private float velocity = 10f;
    private Timer mTimer1;
    private TimerTask mTt1;
    private Handler mTimerHandler = new Handler();

    private Handler handler = new Handler();
    Camera mCam = new Camera();

    private GestureDetector gDetector;

    public TouchGameView(Context context, AttributeSet set) {
        super(context, set);
        startTimer();

        handler.postDelayed(runnable, 100);
        DisplayMetrics metrics = context.getResources().getDisplayMetrics();
        width = metrics.widthPixels;
        height = metrics.heightPixels;
        createPaint();

        absoluteLeft = 0;
        absoluteTop = height;
        absoluteRight = width;
        absoluteBot = height + 5;
        newTop = 0;

        Player player = new Player(width/25, width/30);
        player.setLeft(width/2 + width/30);
        player.setTop(height - width/25);
        player.setRight(width/2);
        player.setBot(height);

        gDetector = new GestureDetector(context, this);
    }

    public void createPaint(){
        paint.setColor(Color.BLACK);
        paint.setStrokeWidth(3);
    }

    @Override
    public void onDraw(Canvas canvas) {

        canvas.save();
        mCam.applyToCanvas(canvas);

        for(RectF rect : objects)
        {
            canvas.drawRect(rect, paint);
        }

        canvas.restore();
    }

    private void stopTimer(){
        if(mTimer1 != null){
            mTimer1.cancel();
            mTimer1.purge();
        }
    }

    private void startTimer(){
        mTimer1 = new Timer();
        mTt1 = new TimerTask() {
            public void run() {
                mTimerHandler.post(new Runnable() {
                    public void run(){

                        rectX = num.nextInt(width + 1);

                        if (num.nextInt(51) > 25){
                            rectWidth = width / 10; // big squares
                        }

                        else
                            rectWidth = width / 20; // small ones

                        // create new rectangle. top left is (x location, height of screen) bot right is (x location + width, x loc (top), height of rect)
                        RectF rect = new RectF(rectX, newTop , rectX + rectWidth, rectWidth + newTop);

                        objects.add(rect);
                        intersect.add(false);


                        //TODO
                    }
                });
            }
        };

        mTimer1.schedule(mTt1, 1, 5000);
    }

    private Runnable runnable = new Runnable() {
        @Override
        public void run() {

            long time1 = System.currentTimeMillis();
            long time2;

            try {
                Thread.sleep(15);
            }
            catch (InterruptedException e){}

            time2 = System.currentTimeMillis(); // Get current time
            int delta = (int) (time2 - time1); // Calculate how long it's been since last update
            update(delta); // Call update with our delta

            time1 = time2; // Update our time variables.

            handler.postDelayed(this, 10);
        }
    };

    ArrayList<Boolean> intersect = new ArrayList<Boolean>();
    float left, top, right, bot;
    int absoluteLeft, absoluteTop, absoluteRight, absoluteBot, newTop;

        public void update(float delta)
        {
            for (int i = 0; i < objects.size(); i++)
            {
                left = objects.get(i).left;
                top = objects.get(i).top;
                right = objects.get(i).right;
                bot = objects.get(i).bottom;

                for (int j = 0; j < objects.size(); j++)
                {
                    if (j == i)
                    {

                    }

                    else if (objects.get(j).intersects(left, top, right, bot))
                    {
                        intersect.set(i, true);
                    }
                }



                if (objects.get(i).intersects(absoluteLeft, absoluteTop, absoluteRight, absoluteBot))
                {
                   intersect.set(i, true);
                }

                if (intersect.get(i) == true)
                {
                    objects.get(i).offset(0,0);
                }

                else{
                  objects.get(i).offset(0f, delta * .08f);}
            }

            invalidate(); // Tells our view to redraw itself, since our position changed.
        }

    int startX, startY, endX, endY;
    @Override
    public boolean onTouchEvent(MotionEvent event)
    {
        return gDetector.onTouchEvent(event);
    }

    @Override
    public boolean onDown(MotionEvent arg0) {
        // TODO Auto-generated method stub
        return false;
    }
    @Override
    public boolean onFling(MotionEvent start, MotionEvent finish, float xVelocity, float yVelocity) {
        if (start.getRawY() < finish.getRawY()) {
           // ((ImageView)findViewById(R.id.image_place_holder)).setImageResource(R.drawable.down);
        } else {
            mCam.translate(0, -10, 0.f);
            newTop -= 10;
          //  ((ImageView)findViewById(R.id.image_place_holder)).setImageResource(R.drawable.up);
        }
        return true;
    }
    @Override
    public void onLongPress(MotionEvent arg0) {
        // TODO Auto-generated method stub
    }
    @Override
    public boolean onScroll(MotionEvent arg0, MotionEvent arg1, float arg2, float arg3) {
        // TODO Auto-generated method stub
        return false;
    }
    @Override
    public void onShowPress(MotionEvent arg0) {
        // TODO Auto-generated method stub
    }
    @Override
    public boolean onSingleTapUp(MotionEvent arg0) {
        // TODO Auto-generated method stub
        return false;
    }

}